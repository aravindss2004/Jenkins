pipeline {
    agent {
        docker {
            image 'maven:3.8.1-openjdk-17'
        }
    }

    environment {
        SONARQUBE = credentials('sonarqube')         // Token stored in Jenkins credentials
        SONARQUBE_URL = 'http://localhost:9000'      // Your local SonarQube server
        DOCKER_CREDENTIALS_ID = 'docker-cred'
        GITHUB_CREDENTIALS_ID = 'github'
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out code...'
            }
        }

        stage('Build and Test') {
            steps {
                dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
                    sh 'mvn clean package'
                }
            }
        }

        stage('Static Code Analysis') {
            steps {
                dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
                    sh """
                        mvn sonar:sonar \\
                            -Dsonar.projectKey=spring-boot-app \\
                            -Dsonar.host.url=${SONARQUBE_URL} \\
                            -Dsonar.login=${SONARQUBE}
                    """
                }
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS_ID}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
                        sh """
                            docker build -t $DOCKER_USER/spring-boot-app:latest .
                            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
                            docker push $DOCKER_USER/spring-boot-app:latest
                        """
                    }
                }
            }
        }

        stage('Update Deployment File') {
            steps {
                dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
                    sh 'sed -i "s|image:.*|image: $DOCKER_USER/spring-boot-app:latest|" k8s/deployment.yaml'
                }
            }
        }

        stage('Deploy using ArgoCD') {
            steps {
                sshagent (credentials: ["${GITHUB_CREDENTIALS_ID}"]) {
                    dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
                        sh """
                            git config user.name "aravindss2004"
                            git config user.email "ssaravind2004@gmail.com"
                            git add k8s/deployment.yaml
                            git commit -m "Updated image to latest"
                            git push origin main
                        """
                    }
                }
            }
        }
    }
}
