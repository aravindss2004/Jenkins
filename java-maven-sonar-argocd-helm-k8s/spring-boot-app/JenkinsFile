pipeline {
  agent any

  environment {
    SONAR_URL = "http://host.docker.internal:9000"
    GIT_REPO_NAME = "Jenkins"
    GIT_USER_NAME = "aravindss"
    DOCKER_IMAGE = "abhishekf5/ultimate-cicd:${BUILD_NUMBER}"
  }

  stages {
    stage('Checkout') {
      steps {
        echo '✅ Checkout stage'
        // Uncomment below if using actual repo
        git branch: 'main', url: 'https://github.com/aravindss2004/Jenkins'
      }
    }

    stage('Build and Test') {
      steps {
        script {
          def dockerWorkspace = pwd().replaceAll('C:\\\\', '/c/').replaceAll('\\\\', '/')
          docker.image('abhishekf5/maven-abhishek-docker-agent:v1').inside("--user root -v //var/run/docker.sock:/var/run/docker.sock -w ${dockerWorkspace}/java-maven-sonar-argocd-helm-k8s/spring-boot-app") {
            sh 'mvn clean package'
          }
        }
      }
    }

    stage('Static Code Analysis') {
      steps {
        script {
          def dockerWorkspace = pwd().replaceAll('C:\\\\', '/c/').replaceAll('\\\\', '/')
          docker.image('abhishekf5/maven-abhishek-docker-agent:v1').inside("--user root -v //var/run/docker.sock:/var/run/docker.sock -w ${dockerWorkspace}/java-maven-sonar-argocd-helm-k8s/spring-boot-app") {
            withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
              sh '''
                mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=$SONAR_URL
              '''
            }
          }
        }
      }
    }

    stage('Build and Push Docker Image') {
      steps {
        script {
          def dockerWorkspace = pwd().replaceAll('C:\\\\', '/c/').replaceAll('\\\\', '/')
          docker.image('abhishekf5/maven-abhishek-docker-agent:v1').inside("--user root -v //var/run/docker.sock:/var/run/docker.sock -w ${dockerWorkspace}/java-maven-sonar-argocd-helm-k8s/spring-boot-app") {
            sh '''
              docker build -t ${DOCKER_IMAGE} .
            '''
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', 'docker-cred') {
              dockerImage.push()
            }
          }
        }
      }
    }

    stage('Update Deployment File') {
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          script {
            def dockerWorkspace = pwd().replaceAll('C:\\\\', '/c/').replaceAll('\\\\', '/')
            sh '''
              git config user.email "abhishek.xyz@gmail.com"
              git config user.name "Abhishek Veeramalla"
              sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
              git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
              git commit -m "Update deployment image to version ${BUILD_NUMBER}"
              git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
            '''
          }
        }
      }
    }
  }

  post {
    failure {
      echo "❌ Pipeline failed. Please check the logs."
    }
    success {
      echo "✅ Pipeline completed successfully!"
    }
  }
}
