pipeline {
    agent {
        docker {
            image 'maven:3.8.1-openjdk-17'
            // Set a custom workspace in Linux style.
            customWorkspace '/c/Users/Aravind/.jenkins/workspace/CICD'
            args '-v /var/run/docker.sock:/var/run/docker.sock'
        }
    }
    environment {
        SONARQUBE     = credentials('sonarqube')
        DOCKER_CRED   = credentials('docker-cred')
        GITHUB        = credentials('github')
        SONARQUBE_URL = 'http://localhost:9000'
        IMAGE_NAME    = 'aravindss2004/spring-boot-app'
    }
    stages {
        stage('Checkout SCM') {
            steps {
                checkout scm
            }
        }
        stage('Build and Test') {
            steps {
                dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
                    sh 'mvn clean package'
                }
            }
        }
        stage('Static Code Analysis') {
            steps {
                dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
                    sh """
                        mvn sonar:sonar \\
                          -Dsonar.projectKey=spring-boot-app \\
                          -Dsonar.host.url=${SONARQUBE_URL} \\
                          -Dsonar.login=${SONARQUBE}
                    """
                }
            }
        }
        stage('Build and Push Docker Image') {
            steps {
                dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
                    script {
                        def imageTag = "${IMAGE_NAME}:${env.BUILD_NUMBER}"
                        sh "docker build -t ${imageTag} ."
                        withCredentials([usernamePassword(credentialsId: 'docker-cred', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                            sh "echo ${DOCKER_PASS} | docker login -u ${DOCKER_USER} --password-stdin"
                        }
                        sh "docker push ${imageTag}"
                    }
                }
            }
        }
        stage('Update Deployment File') {
            steps {
                dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
                    script {
                        def imageTag = "${IMAGE_NAME}:${env.BUILD_NUMBER}"
                        sh "sed -i 's|image: .*|image: ${imageTag}|' k8s/deployment.yaml"
                        sh '''
                            git config user.email "aravind2004@gmail.com"
                            git config user.name "aravindss2004"
                        '''
                        withCredentials([usernamePassword(credentialsId: 'github', usernameVariable: 'GITHUB_USR', passwordVariable: 'GITHUB_PSW')]) {
                            sh """
                                git add k8s/deployment.yaml
                                git commit -m "Update deployment image to ${imageTag}"
                                git push https://${GITHUB_USR}:${GITHUB_PSW}@github.com/aravindss2004/Jenkins.git HEAD:main
                            """
                        }
                    }
                }
            }
        }
    }
}
